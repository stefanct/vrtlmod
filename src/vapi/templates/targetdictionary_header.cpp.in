/*
 * Copyright 2021 Chair of EDA, Technical University of Munich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *	 http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

////////////////////////////////////////////////////////////////////////////////
/// @file targetdictionary_header.cpp
/// @date Created on Wed Aug 12 11:59:22 2022
////////////////////////////////////////////////////////////////////////////////

#include "vrtlmod/vapi/generator.hpp"
#include "vrtlmod/core/core.hpp"
#include "vrtlmod/core/types.hpp"

#include <chrono>
#include <ctime>
#include <iomanip>

namespace vrtlmod
{
namespace vapi
{

std::string VapiGenerator::TDHeader::generate_header(std::string filename) const
{
    auto now = std::chrono::system_clock::now();
    auto in_time_t = std::chrono::system_clock::to_time_t(now);

    std::stringstream x;
    x << R"(
/*
 * Copyright 2022 Chair of EDA, Technical University of Munich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *	 http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
)";

    x << R"(////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file )";
    x << filename;
    x << R"(
/// @date )";
    x << std::put_time(std::localtime(&in_time_t), "%Y-%m-%d %X");
    x << R"(
/// @version )";
    x << get_version();
    x << R"(
////////////////////////////////////////////////////////////////////////////////////////////////////
)";
    return x.str();
}

std::string VapiGenerator::TDHeader::generate_body(void) const
{
    static const char *x = R"(
@CMAKE_TARGET_DICTIONARY_BODY@
)";
    return x;
}

} // namespace vapi
} // namespace vrtlmod
